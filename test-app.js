const fs = require('fs');
const path = require('path');

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
function testProjectStructure() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...\n');

  const requiredFiles = [
    'package.json',
    'babel.config.js',
    'metro.config.js',
    'tsconfig.json',
    'src/App.tsx',
    'src/types/index.ts',
    'src/context/ThemeContext.tsx',
    'src/styles/themes.ts',
    'src/components/Header/Header.tsx',
    'src/components/Footer/Footer.tsx',
    'src/components/Main/Main.tsx',
    'src/screens/AuthScreen/AuthScreen.tsx',
    'src/navigation/AppNavigator.tsx',
    'assets/images/README.md',
    'assets/fonts/README.md'
  ];

  const requiredDirectories = [
    'src/components',
    'src/screens', 
    'src/navigation',
    'src/services',
    'src/utils',
    'src/hooks',
    'src/styles',
    'src/types',
    'assets/images',
    'assets/fonts'
  ];

  let allTestsPassed = true;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
  console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:');
  requiredFiles.forEach(file => {
    const exists = fs.existsSync(path.join(__dirname, file));
    console.log(`${exists ? '‚úÖ' : '‚ùå'} ${file}`);
    if (!exists) allTestsPassed = false;
  });

  console.log('\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:');
  requiredDirectories.forEach(dir => {
    const exists = fs.existsSync(path.join(__dirname, dir));
    console.log(`${exists ? '‚úÖ' : '‚ùå'} ${dir}`);
    if (!exists) allTestsPassed = false;
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
  console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json:');
  try {
    const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, 'package.json'), 'utf8'));
    
    const requiredDeps = [
      'react',
      'react-native',
      '@react-navigation/native',
      'styled-components',
      'zustand'
    ];

    requiredDeps.forEach(dep => {
      const exists = packageJson.dependencies && packageJson.dependencies[dep];
      console.log(`${exists ? '‚úÖ' : '‚ùå'} ${dep}`);
      if (!exists) allTestsPassed = false;
    });

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json');
    allTestsPassed = false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript:');
  try {
    const tsconfig = JSON.parse(fs.readFileSync(path.join(__dirname, 'tsconfig.json'), 'utf8'));
    const hasPaths = tsconfig.compilerOptions && tsconfig.compilerOptions.paths;
    console.log(`${hasPaths ? '‚úÖ' : '‚ùå'} Path mapping –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
    if (!hasPaths) allTestsPassed = false;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è tsconfig.json');
    allTestsPassed = false;
  }

  console.log('\n' + '='.repeat(50));
  if (allTestsPassed) {
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
    console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ');
    console.log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    console.log('\nüöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
  } else {
    console.log('‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò –í –°–¢–†–£–ö–¢–£–†–ï –ü–†–û–ï–ö–¢–ê');
    console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã');
  }
  console.log('='.repeat(50));
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testProjectStructure();